{"ast":null,"code":"var _jsxFileName = \"/home/benek/react-native/whenf1_copy3/frontend/src/components/RefreshButton.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RefreshButton = ({\n  onRefresh\n}) => {\n  _s();\n  const [isLoading, setIsLoading] = useState(false);\n  const [message, setMessage] = useState('');\n  const handleRefresh = async () => {\n    setIsLoading(true);\n    setMessage('');\n    try {\n      const response = await fetch('http://localhost:5000/api/refresh-data', {\n        method: 'POST'\n      });\n      const result = await response.json();\n      if (response.ok) {\n        setMessage('Data refreshed successfully!');\n        onRefresh();\n      } else {\n        setMessage(`Error: ${result.error}`);\n      }\n    } catch (error) {\n      setMessage('Failed to connect to server');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mb-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleRefresh,\n      disabled: isLoading,\n      className: \"w-full bg-green-600 text-white p-3 rounded-xl font-medium hover:bg-green-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors\",\n      children: isLoading ? 'Refreshing...' : 'Refresh Data'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `mt-2 text-sm ${message.includes('Error') ? 'text-red-500' : 'text-green-600'}`,\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(RefreshButton, \"9B/uvihY/IWcvmwVq/yXBzfMk5g=\");\n_c = RefreshButton;\nRefreshButton.propTypes = {\n  onRefresh: PropTypes.func\n};\nexport default RefreshButton;\nvar _c;\n$RefreshReg$(_c, \"RefreshButton\");","map":{"version":3,"names":["React","useState","PropTypes","jsxDEV","_jsxDEV","RefreshButton","onRefresh","_s","isLoading","setIsLoading","message","setMessage","handleRefresh","response","fetch","method","result","json","ok","error","className","children","onClick","disabled","fileName","_jsxFileName","lineNumber","columnNumber","includes","_c","propTypes","func","$RefreshReg$"],"sources":["/home/benek/react-native/whenf1_copy3/frontend/src/components/RefreshButton.js"],"sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst RefreshButton = ({ onRefresh }) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [message, setMessage] = useState('');\n\n  const handleRefresh = async () => {\n    setIsLoading(true);\n    setMessage('');\n    \n    try {\n      const response = await fetch('http://localhost:5000/api/refresh-data', {\n        method: 'POST'\n      });\n      \n      const result = await response.json();\n      \n      if (response.ok) {\n        setMessage('Data refreshed successfully!');\n        onRefresh();\n      } else {\n        setMessage(`Error: ${result.error}`);\n      }\n    } catch (error) {\n      setMessage('Failed to connect to server');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"mb-6\">\n      <button \n        onClick={handleRefresh}\n        disabled={isLoading}\n        className=\"w-full bg-green-600 text-white p-3 rounded-xl font-medium hover:bg-green-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors\"\n      >\n        {isLoading ? 'Refreshing...' : 'Refresh Data'}\n      </button>\n      {message && (\n        <div className={`mt-2 text-sm ${\n          message.includes('Error') ? 'text-red-500' : 'text-green-600'\n        }`}>\n          {message}\n        </div>\n      )}\n    </div>\n  );\n};\n\nRefreshButton.propTypes = {\n  onRefresh: PropTypes.func\n};\n\nexport default RefreshButton;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,SAAS,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,MAAMC,aAAa,GAAGA,CAAC;EAAEC;AAAU,CAAC,KAAK;EAAAC,EAAA;EACvC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAE1C,MAAMW,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChCH,YAAY,CAAC,IAAI,CAAC;IAClBE,UAAU,CAAC,EAAE,CAAC;IAEd,IAAI;MACF,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,wCAAwC,EAAE;QACrEC,MAAM,EAAE;MACV,CAAC,CAAC;MAEF,MAAMC,MAAM,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;MAEpC,IAAIJ,QAAQ,CAACK,EAAE,EAAE;QACfP,UAAU,CAAC,8BAA8B,CAAC;QAC1CL,SAAS,CAAC,CAAC;MACb,CAAC,MAAM;QACLK,UAAU,CAAC,UAAUK,MAAM,CAACG,KAAK,EAAE,CAAC;MACtC;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdR,UAAU,CAAC,6BAA6B,CAAC;IAC3C,CAAC,SAAS;MACRF,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAED,oBACEL,OAAA;IAAKgB,SAAS,EAAC,MAAM;IAAAC,QAAA,gBACnBjB,OAAA;MACEkB,OAAO,EAAEV,aAAc;MACvBW,QAAQ,EAAEf,SAAU;MACpBY,SAAS,EAAC,iJAAiJ;MAAAC,QAAA,EAE1Jb,SAAS,GAAG,eAAe,GAAG;IAAc;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvC,CAAC,EACRjB,OAAO,iBACNN,OAAA;MAAKgB,SAAS,EAAE,gBACdV,OAAO,CAACkB,QAAQ,CAAC,OAAO,CAAC,GAAG,cAAc,GAAG,gBAAgB,EAC5D;MAAAP,QAAA,EACAX;IAAO;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACpB,EAAA,CA9CIF,aAAa;AAAAwB,EAAA,GAAbxB,aAAa;AAgDnBA,aAAa,CAACyB,SAAS,GAAG;EACxBxB,SAAS,EAAEJ,SAAS,CAAC6B;AACvB,CAAC;AAED,eAAe1B,aAAa;AAAC,IAAAwB,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}