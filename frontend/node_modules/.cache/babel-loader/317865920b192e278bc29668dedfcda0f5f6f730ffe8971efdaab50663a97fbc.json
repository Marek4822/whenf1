{"ast":null,"code":"var _jsxFileName = \"/home/benek/react-native/whenf1/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Header from './components/Header';\nimport NextRace from './components/NextRace';\nimport NextEvent from './components/NextEvent';\nimport GrandPrixButton from './components/GrandPrixButton';\nimport F1_DATA from './data/f1Data';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [nextRace, setNextRace] = useState(null);\n  const [nextEvent, setNextEvent] = useState(null);\n  const [timeLeft, setTimeLeft] = useState({\n    days: 0,\n    hours: 0,\n    minutes: 0,\n    seconds: 0\n  });\n  useEffect(() => {\n    const today = new Date();\n    let closestRace = null;\n    let closestEvent = null;\n    let closestRaceDiff = Infinity;\n    let closestEventDiff = Infinity;\n    F1_DATA.GrandsPrix.forEach(grandPrix => {\n      grandPrix.events.forEach(event => {\n        const eventDate = new Date(`${event.date} ${today.getFullYear()} ${event.time}`);\n        const diff = eventDate - today;\n        if (diff > 0) {\n          // Find the next race\n          if (event.type === \"Grand Prix\" && diff < closestRaceDiff) {\n            closestRaceDiff = diff;\n            closestRace = {\n              ...event,\n              grandPrix: grandPrix.name\n            };\n          }\n\n          // Find the next event (any type)\n          if (diff < closestEventDiff) {\n            closestEventDiff = diff;\n            closestEvent = {\n              ...event,\n              grandPrix: grandPrix.name\n            };\n          }\n        }\n      });\n    });\n    setNextRace(closestRace);\n    setNextEvent(closestEvent);\n\n    // Start the countdown timer\n    const timer = setInterval(() => {\n      const now = new Date();\n      const raceDate = new Date(`${closestRace.date} ${now.getFullYear()} ${closestRace.time}`);\n      const raceDiff = raceDate - now;\n      const raceTimeLeft = {\n        days: Math.floor(raceDiff / (1000 * 60 * 60 * 24)),\n        hours: Math.floor(raceDiff % (1000 * 60 * 60 * 24) / (1000 * 60 * 60)),\n        minutes: Math.floor(raceDiff % (1000 * 60 * 60) / (1000 * 60)),\n        seconds: Math.floor(raceDiff % (1000 * 60) / 1000)\n      };\n      setTimeLeft(raceTimeLeft);\n    }, 1000);\n    return () => clearInterval(timer); // Cleanup timer on unmount\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NextRace, {\n      nextRace: nextRace,\n      timeLeft: timeLeft\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NextEvent, {\n      nextEvent: nextEvent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GrandPrixButton, {\n      data: F1_DATA\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"QdVTP2nVPno6jnmwO7Yx95kqink=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Header","NextRace","NextEvent","GrandPrixButton","F1_DATA","jsxDEV","_jsxDEV","App","_s","nextRace","setNextRace","nextEvent","setNextEvent","timeLeft","setTimeLeft","days","hours","minutes","seconds","today","Date","closestRace","closestEvent","closestRaceDiff","Infinity","closestEventDiff","GrandsPrix","forEach","grandPrix","events","event","eventDate","date","getFullYear","time","diff","type","name","timer","setInterval","now","raceDate","raceDiff","raceTimeLeft","Math","floor","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","data","_c","$RefreshReg$"],"sources":["/home/benek/react-native/whenf1/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Header from './components/Header';\nimport NextRace from './components/NextRace';\nimport NextEvent from './components/NextEvent';\nimport GrandPrixButton from './components/GrandPrixButton';\nimport F1_DATA from './data/f1Data';\nimport './styles.css';\n\nconst App = () => {\n  const [nextRace, setNextRace] = useState(null);\n  const [nextEvent, setNextEvent] = useState(null);\n  const [timeLeft, setTimeLeft] = useState({ days: 0, hours: 0, minutes: 0, seconds: 0 });\n\n  useEffect(() => {\n    const today = new Date();\n    let closestRace = null;\n    let closestEvent = null;\n    let closestRaceDiff = Infinity;\n    let closestEventDiff = Infinity;\n\n    F1_DATA.GrandsPrix.forEach((grandPrix) => {\n      grandPrix.events.forEach((event) => {\n        const eventDate = new Date(`${event.date} ${today.getFullYear()} ${event.time}`);\n        const diff = eventDate - today;\n\n        if (diff > 0) {\n          // Find the next race\n          if (event.type === \"Grand Prix\" && diff < closestRaceDiff) {\n            closestRaceDiff = diff;\n            closestRace = { ...event, grandPrix: grandPrix.name };\n          }\n\n          // Find the next event (any type)\n          if (diff < closestEventDiff) {\n            closestEventDiff = diff;\n            closestEvent = { ...event, grandPrix: grandPrix.name };\n          }\n        }\n      });\n    });\n\n    setNextRace(closestRace);\n    setNextEvent(closestEvent);\n\n    // Start the countdown timer\n    const timer = setInterval(() => {\n      const now = new Date();\n      const raceDate = new Date(`${closestRace.date} ${now.getFullYear()} ${closestRace.time}`);\n      const raceDiff = raceDate - now;\n\n      const raceTimeLeft = {\n        days: Math.floor(raceDiff / (1000 * 60 * 60 * 24)),\n        hours: Math.floor((raceDiff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\n        minutes: Math.floor((raceDiff % (1000 * 60 * 60)) / (1000 * 60)),\n        seconds: Math.floor((raceDiff % (1000 * 60)) / 1000),\n      };\n\n      setTimeLeft(raceTimeLeft);\n    }, 1000);\n\n    return () => clearInterval(timer); // Cleanup timer on unmount\n  }, []);\n\n  return (\n    <div className=\"app\">\n      <Header />\n      <NextRace nextRace={nextRace} timeLeft={timeLeft} />\n      <NextEvent nextEvent={nextEvent} />\n      <GrandPrixButton data={F1_DATA} />\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}