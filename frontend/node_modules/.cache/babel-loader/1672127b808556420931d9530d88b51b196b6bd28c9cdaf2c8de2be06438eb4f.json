{"ast":null,"code":"var _jsxFileName = \"/home/benek/react-native/whenf1/frontend/src/components/HamburgerMenu.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HamburgerMenu = ({\n  onTimeZoneChange\n}) => {\n  _s();\n  const [isOpen, setIsOpen] = useState(false);\n  const [selectedTimeZone, setSelectedTimeZone] = useState('UTC');\n  const timeZones = [{\n    value: 'UTC',\n    label: 'UTC'\n  }, {\n    value: 'Europe/London',\n    label: 'London (BST)'\n  }, {\n    value: 'Europe/Paris',\n    label: 'Paris (CEST)'\n  }, {\n    value: 'America/New_York',\n    label: 'New York (EDT)'\n  }, {\n    value: 'Asia/Tokyo',\n    label: 'Tokyo (JST)'\n  }, {\n    value: 'Australia/Sydney',\n    label: 'Sydney (AEST)'\n  }];\n  const handleTimeZoneChange = e => {\n    const timeZone = e.target.value;\n    setSelectedTimeZone(timeZone);\n    onTimeZoneChange(timeZone); // Notify parent component about the time zone change\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"hamburger-menu\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setIsOpen(!isOpen),\n      className: \"hamburger-button\",\n      children: \"\\u2630\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"menu-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Select Time Zone\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedTimeZone,\n        onChange: handleTimeZoneChange,\n        children: timeZones.map(tz => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: tz.value,\n          children: tz.label\n        }, tz.value, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n_s(HamburgerMenu, \"IZFYD21KzW3DgEWUgOG6YFOHUoU=\");\n_c = HamburgerMenu;\nexport default HamburgerMenu;\nvar _c;\n$RefreshReg$(_c, \"HamburgerMenu\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","HamburgerMenu","onTimeZoneChange","_s","isOpen","setIsOpen","selectedTimeZone","setSelectedTimeZone","timeZones","value","label","handleTimeZoneChange","e","timeZone","target","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onChange","map","tz","_c","$RefreshReg$"],"sources":["/home/benek/react-native/whenf1/frontend/src/components/HamburgerMenu.js"],"sourcesContent":["import React, { useState } from 'react';\n\nconst HamburgerMenu = ({ onTimeZoneChange }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [selectedTimeZone, setSelectedTimeZone] = useState('UTC');\n\n  const timeZones = [\n    { value: 'UTC', label: 'UTC' },\n    { value: 'Europe/London', label: 'London (BST)' },\n    { value: 'Europe/Paris', label: 'Paris (CEST)' },\n    { value: 'America/New_York', label: 'New York (EDT)' },\n    { value: 'Asia/Tokyo', label: 'Tokyo (JST)' },\n    { value: 'Australia/Sydney', label: 'Sydney (AEST)' },\n  ];\n\n  const handleTimeZoneChange = (e) => {\n    const timeZone = e.target.value;\n    setSelectedTimeZone(timeZone);\n    onTimeZoneChange(timeZone); // Notify parent component about the time zone change\n  };\n\n  return (\n    <div className=\"hamburger-menu\">\n      <button onClick={() => setIsOpen(!isOpen)} className=\"hamburger-button\">\n        â˜°\n      </button>\n      {isOpen && (\n        <div className=\"menu-content\">\n          <h3>Select Time Zone</h3>\n          <select value={selectedTimeZone} onChange={handleTimeZoneChange}>\n            {timeZones.map((tz) => (\n              <option key={tz.value} value={tz.value}>\n                {tz.label}\n              </option>\n            ))}\n          </select>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default HamburgerMenu;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,aAAa,GAAGA,CAAC;EAAEC;AAAiB,CAAC,KAAK;EAAAC,EAAA;EAC9C,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EAC3C,MAAM,CAACQ,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAE/D,MAAMU,SAAS,GAAG,CAChB;IAAEC,KAAK,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAM,CAAC,EAC9B;IAAED,KAAK,EAAE,eAAe;IAAEC,KAAK,EAAE;EAAe,CAAC,EACjD;IAAED,KAAK,EAAE,cAAc;IAAEC,KAAK,EAAE;EAAe,CAAC,EAChD;IAAED,KAAK,EAAE,kBAAkB;IAAEC,KAAK,EAAE;EAAiB,CAAC,EACtD;IAAED,KAAK,EAAE,YAAY;IAAEC,KAAK,EAAE;EAAc,CAAC,EAC7C;IAAED,KAAK,EAAE,kBAAkB;IAAEC,KAAK,EAAE;EAAgB,CAAC,CACtD;EAED,MAAMC,oBAAoB,GAAIC,CAAC,IAAK;IAClC,MAAMC,QAAQ,GAAGD,CAAC,CAACE,MAAM,CAACL,KAAK;IAC/BF,mBAAmB,CAACM,QAAQ,CAAC;IAC7BX,gBAAgB,CAACW,QAAQ,CAAC,CAAC,CAAC;EAC9B,CAAC;EAED,oBACEb,OAAA;IAAKe,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC7BhB,OAAA;MAAQiB,OAAO,EAAEA,CAAA,KAAMZ,SAAS,CAAC,CAACD,MAAM,CAAE;MAACW,SAAS,EAAC,kBAAkB;MAAAC,QAAA,EAAC;IAExE;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EACRjB,MAAM,iBACLJ,OAAA;MAAKe,SAAS,EAAC,cAAc;MAAAC,QAAA,gBAC3BhB,OAAA;QAAAgB,QAAA,EAAI;MAAgB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACzBrB,OAAA;QAAQS,KAAK,EAAEH,gBAAiB;QAACgB,QAAQ,EAAEX,oBAAqB;QAAAK,QAAA,EAC7DR,SAAS,CAACe,GAAG,CAAEC,EAAE,iBAChBxB,OAAA;UAAuBS,KAAK,EAAEe,EAAE,CAACf,KAAM;UAAAO,QAAA,EACpCQ,EAAE,CAACd;QAAK,GADEc,EAAE,CAACf,KAAK;UAAAS,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEb,CACT;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAClB,EAAA,CAtCIF,aAAa;AAAAwB,EAAA,GAAbxB,aAAa;AAwCnB,eAAeA,aAAa;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}